(name 'Control-fbs.18' message 'We must copy the array in DelimitedDynamicVariableSet >> #dlet:in:.The bug can cause an array literal to be altered, something that can only be remedied by recompiling the source that creates the literal!' id '86916f3d-8af3-4c7a-a150-7d666c32eaee' date '2 August 2012' time '6:47:01.014 pm' author 'fbs' ancestors ((name 'Control-fbs.17' message 'DelimitedDynamicVariableSet, like ExceptionSet, permits the easy usage of multiple delimited dynamic variables. Also like ExceptionSet, it''s not actually a Set.' id '0230fa31-f7bd-4e9a-9d30-7e470c998e75' date '27 July 2012' time '9:35:58.272 am' author 'fbs' ancestors ((name 'Control-fbs.16' message '... and now #dset: actually works.' id '11057e2e-a5da-4c0a-b4e1-465616d93c10' date '14 July 2012' time '10:23:32.017 pm' author 'fbs' ancestors ((name 'Control-fbs.15' message '#dset: reimplemented to remove the crazy nonsense that was its previous implementation.' id '08a2abb0-daba-48ae-b255-98954a063635' date '14 July 2012' time '9:35:03.452 pm' author 'fbs' ancestors ((name 'Control-fbs.14' message 'Correct the monadic return.' id 'f548fe6c-7178-427f-8125-aeb8d8779db0' date '27 June 2012' time '9:24:27.068 pm' author 'fbs' ancestors ((name 'Control-fbs.13' message 'Delimited dynamic variables. Like normal ones, but these play nice with shift/reset.' id '2451c4ce-5014-4b00-bef8-f7f379f35f46' date '27 June 2012' time '8:19:41.907 pm' author 'fbs' ancestors ((name 'Control-fbs.12' message 'Return for the continuation monad actually means "put a _blocklike value_ into a continuation wrapping just that blocklike value.".' id '7180a2d7-4fe1-488b-bcbd-5159446e6846' date '1 May 2012' time '9:22:32.59 am' author 'fbs' ancestors ((name 'Control-fbs.11' message 'There''s a bit of confusion between ZipperControl and Control: since ZipperControl uses Control, #compose: belongs in Control!' id '62ef40d8-8676-45e1-8b3e-973031933b42' date '18 September 2011' time '10:55:03.654 am' author 'fbs' ancestors ((name 'Control-fbs.10' message '* Cut the stack ABOVE the actual marker - the #on:do: above the #reset.* Make it explicit that continuations form a monad.' id '296a4999-1ce3-4da0-8179-039098dd5109' date '28 June 2011' time '12:13:00.245 pm' author 'fbs' ancestors ((name 'Control-fbs.9' message 'A subsequent shift can''t find its reset context. It finds _a_ reset context, which doesn''t match that on the stack.(That might be because the DelimitedControlException finds the copy of the reset context attached to itself, while walking the stack finds the reset left on the stack?)So this rubbish hack - finding a context based on identity of the method - is a workaround. It works, but it''s rubbish, and if you''re tricky with recompilations of BlockClosure>>reset it will fail.' id '0916f083-6404-4c8d-b932-83f20b320b8b' date '21 June 2011' time '9:32:51.67 pm' author 'fbs' ancestors ((name 'Control-fbs.8' message 'shift as previously implemented was actually shift0, which strips the reset marker from the stack. In contrast, one may call multiple shifts within a the scope of a reset.' id '8f6de7f4-89ef-4307-a379-1822504d5fd3' date '20 June 2011' time '9:04:09.537 pm' author 'fbs' ancestors ((name 'Control-ul.7' message '- use #copyTo:bottomContextDo: for copying the contexts- fixed some comments' id '9efa09a3-329b-fa4f-9447-f8e37365f098' date '28 April 2011' time '3:05:28.73 am' author 'ul' ancestors ((name 'Control-ul.6' message 'Intermediate snapshot:- use the serialization method #copyTo: of context instead of rolling our own' id 'ff96af71-4701-d142-bdd6-b6f45aeb491b' date '24 April 2011' time '12:56:16.598 am' author 'ul' ancestors ((name 'Control-ul.5' message '- a bit faster serialization of PartialContinuation- added PartialContinuationNotification' id '5ddedcc9-05a3-4346-925c-6a1db30425c4' date '23 April 2011' time '3:35:28.516 am' author 'ul' ancestors ((name 'Control-fbs.4' message 'Better comment, thanks to Julian Fitzell''s insight that you''re not "returning" at all - you''re "proceeding with the computation". The confusion stems from the fact that usually the return continuation means the same as "return a value to the caller of this method."' id 'c2042241-ab2c-2449-af2a-825d7e439ae8' date '18 April 2011' time '10:05:09.975 pm' author 'fbs' ancestors ((name 'Control-fbs.3' message 'Test showing "post-context" - that the partial continuation / zipper has context to its "right".' id '2a92e257-20a6-0a48-a261-c899cdc1dedb' date '17 April 2011' time '1:03:23.529 pm' author 'fbs' ancestors ((name 'Control-fbs.2' message 'Actually include shift and reset in the package!' id '19f12983-6d62-c045-86d1-05e12531deb5' date '15 April 2011' time '2:01:37.575 pm' author 'fbs' ancestors ((name 'Control-fbs.1' message 'Initial import. Basic implementation, and several tests. PartialContinuation borrows heavily from Seaside''s WAPartialContinuation: it copies verbatim the serialisation/deserialisation algorithm.' id '6d070a71-6b2e-d547-b4ed-f6099e05d1c8' date '14 April 2011' time '5:29:43.326 pm' author 'fbs' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())